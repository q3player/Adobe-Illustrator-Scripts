// GLOBALESvar typosafe = "mod_typo"; // Name der ausgeblendeten Ebene(n), die nicht gelöscht werden soll(en)var varnish = "Lack"; // Name der Ebene für den Lack-Filmvar white = "SF Weiss"; // Name der Ebene für den Weiß-Hinterlegervar printfolder = "_PRINT"; // Suffix für den Sammelordnervar imagefolder = "Bilder"; // Ordner-Name für die zu sammelnden verknüpften Bildervar pdfOption = 'PDFX3_CanDo_X3'; // Name der PDF-Settings für Druck-PDFvar pdfOption2 = 'Ansichts-PDF 72dpi'; // Name der PDF-Settings für Ansichts-PDFvar aiSuff = '_cs6'; // Suffix für offene AI-Dateivar aiSuff2 = '_cs6zw'; // Suffix für offene AI-Datei mit Schriften in Pfadenvar pdfSuff = '_x3.pdf'; // Suffix für Druck-PDFvar pdfSuff2 = '_lowres.pdf'; // Suffix für Ansichts-PDFvar linknew = false; // true = Bilddaten neu verknüpfen aus Sammel-Ordner// __________________________________________________________________________________ ////STATUSFENSTER var statuswin = new Window ('palette', "Druckdaten werden gesammelt", [700, 200, 1100, 535], {independent:true});statuswin.add ('panel',[15, 15, 385, 220], "Aufgaben:");statuswin.add ('statictext',[30, 30, 285, 100], "Ausgeblendete Ebenen löschen ...");statuswin.add ('statictext',[30, 45, 285, 100], "Sammelordner ..._PRINT erstellen ...");statuswin.add ('statictext',[30, 60, 285, 100], "Unterordner Bilder erstellen ...");statuswin.add ('statictext',[30, 75, 285, 100], "Bilder sammeln ...");statuswin.add ('statictext',[30, 90, 285, 100], "AI speichern ...");statuswin.add ('statictext',[30, 105, 285, 100], "PDF/X-3 erstellen ...");statuswin.add ('statictext',[30, 120, 285, 100], "Schriften in Pfade umwandeln ...");statuswin.add ('statictext',[30, 135, 285, 100], "Ebene SF Weiss ausblenden ...");statuswin.add ('statictext',[30, 150, 285, 100], "Ebene Lack ausblenden ...");statuswin.add ('statictext',[30, 165, 285, 100], "Ansichts-PDF erstellen ...");statuswin.add ('statictext',[30, 180, 285, 100], "AI mit Fonts in ZW speichern ...");statuswin.add ('statictext',[30, 195, 285, 100], "Schriften sammeln ...");statuswin.pnl = statuswin.add("panel", [15, 215, 385, 300], "Druckdaten sind gesammelt zu ...");  statuswin.pnl.progBar = statuswin.pnl.add("progressbar", [20, 30, 340, 50], 0, 100);  statuswin.pnl.progBarLabel = statuswin.pnl.add("statictext", [30, 33, 285, 235], "0%");  statuswin.add ('statictext',[15, 310, 285, 400], "_MH_DDsammeln_komplett_v6b / Februar 2016");// __________________________________________________________________________________ ////ABFRAGE STARTvar weiter = confirm ('DRUCKDATEN SAMMELN: \n'+                      'Alle ausgeblendeten Ebenen und Elemente \n'+                      'werden gelöscht und die aktuelle Datei gespeichert\n'+                      'sowie darin verwendete Bilder gesammelt! \n\n'+                      'Sofern vorhanden müssen bestimmte Ebenen \n'+                      'wie folgt benannt sein: \n'+                      'SF Weiss = Ebene für Weißfilm \n'+                      'Lack = Ebene für Drucklack \n\n'+                      'Modifizierte Schriften, bspw. mit Effekten, sollten vorab \n'+                      'über Objekt > Umwandeln in Pfade geändert werden. \n\n'+                      'Um die modifizierte Typo zu bewahren, muss die \n' +                      'Ebene/Gruppe umbenannt werden in mod_typo! \n\n'+                      'Wichtig: Es darf immer nur 1 Illustrator-Dokument geöffnet sein! \n\n'+                      'Fortfahren?',"Hinweis");                                // __________________________________________________________________________________ //var doc = app.activeDocument;var original_file = doc.fullName;var ursprung = doc.fullName;function stwin_delhidden() {statuswin.add ('statictext',[305, 30, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 10;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_printfolder() {statuswin.add ('statictext',[305, 45, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 15;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_imagefolder() {statuswin.add ('statictext',[305, 60, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 20;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_images() {statuswin.add ('statictext',[305, 75, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 30;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_cs6() {statuswin.add ('statictext',[305, 90, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 40;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_x3() {statuswin.add ('statictext',[305, 105, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 50;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_fontvect() {statuswin.add ('statictext',[305, 120, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 55;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_sfweiss() {statuswin.add ('statictext',[305, 135, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 65;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_lack() {statuswin.add ('statictext',[305, 150, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 70;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_lowres() {statuswin.add ('statictext',[305, 165, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 80;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_cs6zw () {statuswin.add ('statictext',[305, 180, 345, 100], "erledigt");statuswin.update();statuswin.pnl.progBar.value= 90;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();}function stwin_ende() {statuswin.add ('statictext',[305, 195, 345, 100], "to do");statuswin.update();statuswin.pnl.progBar.value= 100;   statuswin.pnl.progBarLabel.text = statuswin.pnl.progBar.value+"%";  statuswin.update();$.sleep(3000);alert ("Druckdaten sind gesammelt. Schriften fehlen noch! \n Weiterhin angenehmen Aufenthalt ;-)");}function delete_hidden () {    var idoc = app.activeDocument;      for (i = idoc.pageItems.length-1; i>=0; i--){            if (idoc.pageItems[i].hidden == true){                 if (idoc.pageItems[i].name != typosafe) {                idoc.pageItems[i].remove()}               }              }  }function delete_hidden_layers () {    var myDoc=app.activeDocument;    var layerCount=myDoc.layers.length;        for (var ii = layerCount - 1; ii >= 0; ii--) {        var currentLayer = myDoc.layers[ii];        currentLayer.locked = false;        var subCount = currentLayer.layers.length;        for (var ss =subCount -1; ss >= 0; ss--){        var subLayer = currentLayer.layers[ss];        subLayer.locked = false;        if (subLayer.visible == false){            subLayer.visible = true;            if (subLayer.name != typosafe) {                subLayer.remove()}            else {                subLayer.visible = false};            }        }    if (currentLayer.visible == false){        currentLayer.visible = true;         if (currentLayer.name != typosafe) {                currentLayer.remove()}            else {                currentLayer.visible = false};        }    }}function hide_lack () {    var doclack = app.activeDocument;      var myLayers2 = doclack.layers;      var HideName2 = varnish;      try {          HideLayer2 = myLayers2.getByName (HideName2);          HideLayer2.visible = false;          redraw();          }      catch (e) {}   }function hide_sfweiss () {    var docwht = app.activeDocument;      var myLayers1 = docwht.layers;      var HideName1 = white;      try {          HideLayer1 = myLayers1.getByName (HideName1);          HideLayer1.visible = false;          redraw();          }      catch (e) {}  }if (weiter == true) { statuswin.show();delete_hidden_layers ();delete_hidden ();stwin_delhidden ();if (!doc.saved) doc.save();// Sonderzeichen im Ordnernamen werden geändert bzw. entferntvar FILE_SUFFIX = aiSuff;var ASSET_SUFFIX = imagefolder; //Ordnername definiert unter GLOBALES   var arr = doc.name.split(".");var extension = "";if (arr.length>1) extension = "." + arr.pop();var filename = arr.join(".");var foldername = filename;var foldername = foldername.replace(/RZ_/,""); // lösche RZ_ für Ordnernamenvar foldername = foldername.replace(/\s/g,"_"); // ersetze Blanks durch Unterstrichevar foldername = foldername.replace("ß","ss"); // ersetze ß durch ssvar foldername = foldername.replace("%","Pr"); // ersetze %-Zeichen durch Prvar foldername = foldername.replace(/[^-a-zA-Z0-9._]/g,""); // ersetze sonstige Sonderzeichen und Umlautevar export_folder = "~/Desktop/" + foldername + printfolder;var assets_folder = new Folder (export_folder + "/" + ASSET_SUFFIX);if (assets_folder.exists || assets_folder.create()) {stwin_printfolder ();stwin_imagefolder ();    var i, in_file, out_file;    for (i = 0; i < doc.placedItems.length; i++) {        in_file = doc.placedItems[i].file;        out_file = File(assets_folder + "/" + in_file.name);        in_file.copy(out_file);        if (linknew) {doc.placedItems[i].file = out_file};    	}	for (i = 0; i < doc.rasterItems.length; i++) {        if (doc.rasterItems[i].embedded) continue;        in_file = doc.rasterItems[i].file;        out_file = File(assets_folder + "/" + in_file.name);        in_file.copy(out_file);        if (linknew) {doc.rasterItems[i].file = out_file};     }}stwin_images ();packaged_file = File(export_folder + "/" + filename + FILE_SUFFIX + extension);var save_options = new IllustratorSaveOptions();save_options.embedICCProfile = true;save_options.pdfCompatible = falsedoc.saveAs(packaged_file, save_options);     stwin_cs6 ();// Datei speichern als PDF/X-3 try {	if (app.documents.length > 0 ) {        var doc = app.activeDocument;        var doc2 = doc.name.replace(/_cs6/,'');        var original_file = doc.fullName;        var destFolder = null;        destFolder = activeDocument.path		if (destFolder != null) {			var options, i, sourceDoc, targetFile;							options = this.getOptions();								for ( i = 0; i < app.documents.length; i++ ) {				sourceDoc = app.documents[i]; // returns the document object														targetFile = this.getTargetFile(doc2, pdfSuff, destFolder);				sourceDoc.saveAs( targetFile, options );                doc.close();                app.open(File(original_file));			}		}	}	else{		throw new Error('Keine geoeffneten Dokumente!');	}}catch(e) {	alert( e.message, "Skript-Warnung", true);}function getOptions(){	var options = new PDFSaveOptions();	options.pDFPreset = pdfOption	return options;}function getTargetFile(docName, ext, destFolder) {	var newName = "";	if (docName.indexOf('.') < 0) {		newName = docName + ext;	} else {		var dot = docName.lastIndexOf('.');         newName += docName.substring(0, dot);		newName += ext;	}		var myFile = new File( destFolder + '/' + newName );		if (myFile.open("w")) {		myFile.close();	}	else {		throw new Error('Zugriff verweigert.');	}	return myFile;}stwin_x3 ();// Schriften in Pfade wandelnvar doc = app.activeDocument;while (doc.textFrames.length != 0) {          doc.textFrames[0].createOutline();          }stwin_fontvect ();hide_sfweiss ();stwin_sfweiss ();hide_lack ();stwin_lack ();// Datei speichern als Ansichts-PDF try {		if (app.documents.length > 0 ) {        var pvdoc = app.activeDocument;        var pvdoc2 = pvdoc.name.replace(aiSuff,'');        var pvoriginal_file = pvdoc.fullName;		var destFolder = null;		destFolder = activeDocument.path		if (destFolder != null) {			var pvoptions, i, sourceDoc, targetFile;							pvoptions = this.getpvOptions();								for ( i = 0; i < app.documents.length; i++ ) {				sourceDoc = app.documents[i]; // returns the document object														targetFile = this.getpvTargetFile(pvdoc2, pdfSuff2, destFolder);				sourceDoc.saveAs( targetFile, pvoptions );                doc.close();                app.open(File(original_file));			}		}	}	else{		throw new Error('Keine geoeffneten Dokumente!');	}}catch(e) {	alert( e.message, "Skript-Warnung", true);}function getpvOptions(){	var pvoptions = new PDFSaveOptions();	pvoptions.pDFPreset = pdfOption2	return pvoptions;}function getpvTargetFile(docName, ext, destFolder) {	var newName = "";	if (docName.indexOf('.') < 0) {		newName = docName + ext;	} else {		var dot = docName.lastIndexOf('.');		newName += docName.substring(0, dot);		newName += ext;	}		var myFile = new File( destFolder + '/' + newName );	if (myFile.open("w")) {		myFile.close();	}	else {		throw new Error('Zugriff verweigert.');	}	return myFile;}stwin_lowres ();// Schriften in Pfade wandelnvar doc = app.activeDocument;while (doc.textFrames.length != 0) {        doc.textFrames[0].createOutline();        }        var doc2 = doc.name.replace(aiSuff,aiSuff2);var destFolder = activeDocument.path;packaged_file = File (destFolder + "/" + doc2);doc.saveAs (packaged_file);doc.close ();stwin_cs6zw ();app.open(File(ursprung));stwin_ende ();}else { alert ("Skript beendet. Keine Änderungen vorgenommen.") };